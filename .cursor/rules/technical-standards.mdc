---
description: 
globs: 
alwaysApply: false
---
## Technical Standards

### Async/Await Patterns
```python
# Always use async for database operations
async def create_plan(
    db: AsyncSession,
    plan_in: schemas.PlanCreate,
    current_user: User
) -> Plan:
    db_plan = Plan(**plan_in.dict(), created_by=current_user.id)
    db.add(db_plan)
    await db.commit()
    await db.refresh(db_plan)
    return db_plan

# Use async context managers
async with AsyncSession(engine) as session:
    async with session.begin():
        # Transaction operations
        pass
```

### CRUD Base Class Pattern
```python
class CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    def __init__(self, model: Type[ModelType]):
        self.model = model

    async def get(self, db: AsyncSession, id: Any) -> Optional[ModelType]:
        result = await db.execute(select(self.model).where(self.model.id == id))
        return result.scalar_one_or_none()

    async def get_multi(
        self, db: AsyncSession, *, skip: int = 0, limit: int = 100
    ) -> List[ModelType]:
        result = await db.execute(
            select(self.model).offset(skip).limit(limit)
        )
        return result.scalars().all()
```

### Error Handling Standards
```python
# Custom exceptions for business logic
class PlanningError(Exception):
    """Base exception for planning operations"""
    pass

class PlanAlreadySubmittedException(PlanningError):
    """Raised when trying to modify a submitted plan"""
    pass

# HTTP exception mapping
try:
    await service.submit_plan(plan_id)
except PlanAlreadySubmittedException:
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail="Plan has already been submitted"
    )
```

### Database Relationship Management
```python
# Always define bidirectional relationships
class District(BaseModel, table=True):
    province_id: int = Field(foreign_key="provinces.id")
    
    # Forward relationship
    province: "Province" = Relationship(back_populates="districts")
    # Back relationship
    facilities: List["Facility"] = Relationship(back_populates="district")

class Province(BaseModel, table=True):
    # Back relationship
    districts: List["District"] = Relationship(back_populates="province")
```

### Validation Patterns
```python
# Use Pydantic validators for complex business logic
class PlanCreate(BaseModel):
    facility_id: int
    program_id: int
    fiscal_year_id: int
    
    @validator('facility_id')
    def validate_facility_exists(cls, v, values):
        # Custom validation logic
        return v
    
    @root_validator
    def validate_unique_plan(cls, values):
        # Cross-field validation
        return values
```
